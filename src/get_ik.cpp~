/*********************************************************************
 * Software License Agreement (BSD License)
 *
 *  Copyright (c) 2012, Willow Garage, Inc.
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above
 *     copyright notice, this list of conditions and the following
 *     disclaimer in the documentation and/or other materials provided
 *     with the distribution.
 *   * Neither the name of Willow Garage nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 *  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 *  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 *  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 *  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 *  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 *********************************************************************/

/* Author: Angel Delgado */

#include <ros/ros.h>

// MoveIt!
#include <moveit/robot_model_loader/robot_model_loader.h>
#include <moveit/robot_model/robot_model.h>
#include <moveit/robot_state/robot_state.h>
#include <moveit_msgs/DisplayRobotState.h>
// Robot state publishing
#include <moveit/robot_state/conversions.h>
#include <moveit_msgs/DisplayRobotState.h>
#include <std_msgs/Float64.h>
#include <pr2_controllers_msgs/JointControllerState.h>
#include <sensor_msgs/JointState.h>
// PI
#include <boost/math/constants/constants.hpp>

// Shared robot_model & robot_state
robot_model::RobotModelPtr sharedKinematic_model;
robot_state::RobotStatePtr sharedKinematic_state; 

// joint group
const robot_state::JointModelGroup* right_f_joint_model_group;
const robot_state::JointModelGroup* middle_f_joint_model_group;
const robot_state::JointModelGroup* left_f_joint_model_group;
const robot_state::JointModelGroup* th_joint_model_group;


/**
* Joint position callback:
*/
void positionCallback(const sensor_msgs::JointState::ConstPtr& msg)
{
    //const double vPositions[16]= msg->position;
    const double vPos_j0 = msg->position[0];
    const double vPos_j1 = msg->position[1];
    const double vPos_j2 = msg->position[2];
    const double vPos_j3 = msg->position[3];
    const double vPos_j4 = msg->position[4];
    const double vPos_j5 = msg->position[5];
    const double vPos_j6 = msg->position[6];
    const double vPos_j7 = msg->position[7];
    const double vPos_j8 = msg->position[8];
    const double vPos_j9 = msg->position[9];
    const double vPos_j10 = msg->position[10];
    const double vPos_j11 = msg->position[11];
    const double vPos_j12 = msg->position[12];
    const double vPos_j13 = msg->position[13];
    const double vPos_j14 = msg->position[14];
    const double vPos_j15 = msg->position[15];
    const std::vector<std::string> &joint_names = right_f_joint_model_group->getJointModelNames();
 
    
    for(std::size_t i = 0; i < joint_names.size(); ++i)
    {
	ROS_INFO("==========================Joint name %s: ", joint_names[i].c_str());
    }
    // set positions right finger (j0,j1,j2,j3   / joint_names[4] = j3tip)
    sharedKinematic_state->setJointPositions(joint_names[0],&vPos_j0);
    sharedKinematic_state->setJointPositions(joint_names[1],&vPos_j1);
    sharedKinematic_state->setJointPositions(joint_names[2],&vPos_j2);
    sharedKinematic_state->setJointPositions(joint_names[3],&vPos_j3);

    // Mostrar valor joint
    std::vector<double> joint_values;
    sharedKinematic_state->copyJointGroupPositions(right_f_joint_model_group, joint_values);
   
    for(std::size_t i = 0; i < joint_names.size(); ++i)
      {
	ROS_INFO("==========================Joint %s: %f", joint_names[i].c_str(), joint_values[i]);
      }
    ROS_INFO("============================================");
   
    
    
    
    const Eigen::Affine3d &end_effector_state = sharedKinematic_state->getGlobalLinkTransform("link_3.0_tip");

    /* Print end-effector pose. Remember that this is in the model frame */
    //ROS_INFO_STREAM("Translation: " << end_effector_state.translation());
    //ROS_INFO_STREAM("Rotation: " << end_effector_state.rotation());

    // Inverse Kinematics
    // ^^^^^^^^^^^^^^^^^^
    /**
    bool found_ik = sharedKinematic_state->setFromIK(mf_joint_model_group, end_effector_state, 10, 0.1);

    // Now, we can print out the IK solution (if found):
    if (found_ik)
    {
      sharedKinematic_state->copyJointGroupPositions(mf_joint_model_group, joint_values);
      for(std::size_t i=0; i < joint_names.size(); ++i)
      {
	ROS_INFO("IK para Joint %s: %f", joint_names[i].c_str(), joint_values[i]);
      }   
    }
    else
    {
      ROS_INFO("Did not find IK solution");
    }
    
    // Get the Jacobian
    // ^^^^^^^^^^^^^^^^
    // We can also get the Jacobian from the :moveit_core:`RobotState`.
    Eigen::Vector3d reference_point_position(0.0,0.0,0.0);
    Eigen::MatrixXd jacobian;
    sharedKinematic_state->getJacobian(mf_joint_model_group, sharedKinematic_state->getLinkModel(mf_joint_model_group->getLinkModelNames().back()),
				  reference_point_position,
				  jacobian);
      ROS_INFO_STREAM("Jacobian: " << jacobian);
      
      */
      
}




int main(int argc, char **argv)
{
  ros::init (argc, argv, "allegro_get_ik");
  ros::NodeHandle nh;  

  // Definir callbacks para cada joint publicada :  Allegro positions topic
  ros::Subscriber subsJointStates = nh.subscribe("/allegroHand_0/joint_states", 1000, positionCallback);

  // Cargar modelo
  
  
  robot_model_loader::RobotModelLoader robot_model_loader("robot_description");
  
  robot_model::RobotModelPtr kinematic_model = robot_model_loader.getModel();
  ROS_INFO("Model frame: %s", kinematic_model->getModelFrame().c_str());
  ROS_INFO("############################################################");
  sharedKinematic_model	= kinematic_model;

  // Definir kinematic state
  robot_state::RobotStatePtr kinematic_state(new robot_state::RobotState(kinematic_model));
  sharedKinematic_state = kinematic_state;
  
  //sharedKinematic_state->setToDefaultValues();
  
  // Definir joint groups
  right_f_joint_model_group = kinematic_model->getJointModelGroup("right_finger");
  middle_f_joint_model_group = kinematic_model->getJointModelGroup("middle_finger");
  left_f_joint_model_group = kinematic_model->getJointModelGroup("left_finger");
  th_joint_model_group = kinematic_model->getJointModelGroup("thumb");
 
   
  ros::spin();
  return 0;
}
